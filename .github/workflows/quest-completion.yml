name: Quest Completion

on:
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  create-completion-pr:
    # Issueのコメントで「完了しました」「完了」「done」などが含まれている場合に実行
    if: |
      github.event.issue.state == 'open' &&
      contains(github.event.issue.labels.*.name, 'quest-in-progress') &&
      (
        contains(github.event.comment.body, '完了しました') ||
        contains(github.event.comment.body, '完了') ||
        contains(github.event.comment.body, 'done') ||
        contains(github.event.comment.body, 'Done') ||
        contains(github.event.comment.body, 'DONE')
      )

    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Extract quest information from issue
        id: extract-info
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            const commenter = context.payload.comment.user.login;

            // Issueの本文からクエストスラッグを抽出
            const questSlugMatch = issueBody.match(/クエストスラッグ[:\s]*(.+)/);

            const questSlug = questSlugMatch ? questSlugMatch[1].trim().replace(/`/g, '') : '';
            const username = commenter; // コメント投稿者を常に使用

            if (!questSlug) {
              core.setFailed('クエストスラッグが見つかりませんでした');
              return;
            }

            console.log('Quest Slug:', questSlug);
            console.log('Username:', username);
            console.log('Issue Number:', issue.number);

            core.setOutput('quest_slug', questSlug);
            core.setOutput('username', username);
            core.setOutput('issue_number', issue.number);
            core.setOutput('branch_name', `quest/${questSlug.replace(/\//g, '-')}/${username}`);

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create branch
        run: |
          git checkout -b ${{ steps.extract-info.outputs.branch_name }}

      - name: Add user to completers list
        id: update-quest
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const matter = require('gray-matter');

            const questSlug = '${{ steps.extract-info.outputs.quest_slug }}';
            const username = '${{ steps.extract-info.outputs.username }}';
            const questPath = path.join('_data', `${questSlug}.md`);

            console.log('Quest file path:', questPath);

            if (!fs.existsSync(questPath)) {
              core.setFailed(`クエストファイルが見つかりません: ${questPath}`);
              return;
            }

            // マークダウンファイルを読み込み
            const fileContent = fs.readFileSync(questPath, 'utf8');
            const { data, content } = matter(fileContent);

            // completersに追加（重複チェック）
            if (!data.completers) {
              data.completers = [];
            }

            if (!data.completers.includes(username)) {
              data.completers.push(username);
              
              // 更新日を現在の日付に更新
              const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
              data.updatedAt = today;
              
              console.log(`Added ${username} to completers`);
              console.log(`Updated updatedAt to ${today}`);
              
              // ファイルを更新
              const newContent = matter.stringify(content, data);
              fs.writeFileSync(questPath, newContent);
              
              core.setOutput('updated', 'true');
              core.setOutput('quest_path', questPath);
            } else {
              console.log(`${username} is already in completers`);
              core.setOutput('updated', 'false');
            }

      - name: Commit changes
        if: steps.update-quest.outputs.updated == 'true'
        run: |
          git add ${{ steps.update-quest.outputs.quest_path }}
          git commit -m "⚔️ quest: Add ${{ steps.extract-info.outputs.username }} to quest completers

          Quest: ${{ steps.extract-info.outputs.quest_slug }}
          Closes #${{ steps.extract-info.outputs.issue_number }}"

      - name: Push branch
        if: steps.update-quest.outputs.updated == 'true'
        run: |
          git push origin ${{ steps.extract-info.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.update-quest.outputs.updated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🎉 [Quest Complete] ${{ steps.extract-info.outputs.quest_slug }} - @${{ steps.extract-info.outputs.username }}`,
              head: '${{ steps.extract-info.outputs.branch_name }}',
              base: 'main',
              body: `## 🎯 クエスト完了

            このPRは、クエスト完了の申請です。

            ### クエスト情報
            - **クエスト**: \`${{ steps.extract-info.outputs.quest_slug }}\`
            - **完了者**: @${{ steps.extract-info.outputs.username }}
            - **関連Issue**: #${{ steps.extract-info.outputs.issue_number }}

            ---

            ### 📝 提出者へ

            以下の情報をこのPRのコメントに追加してください：

            1. **成果物・証拠**
              - 関連URL（記事、リポジトリ、デモサイトなど）
              - スクリーンショット
              - その他の成果物

            2. **振り返り**
              - 学んだこと
              - 苦労したこと
              - 次に挑戦したいこと

            ---

            ### ✅ レビュワーへ

            提出物を確認して、成功条件を満たしている場合はApproveしてください。
            問題がある場合は、コメントでフィードバックをお願いします。

            ---

            Closes #${{ steps.extract-info.outputs.issue_number }}`
                        });
                        
                        // PRにラベルを追加
                        await github.rest.issues.addLabels({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: pullRequest.number,
                          labels: ['quest-completion', 'needs-review']
                        });
                        
                        // 元のIssueにコメント
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: ${{ steps.extract-info.outputs.issue_number }},
                          body: `🎉 クエスト完了申請のPRを作成しました！

            PR: #${pullRequest.number}

            次のステップ：
            1. PRに成果物（URL、スクリーンショットなど）を投稿してください
            2. 振り返りを記入してください
            3. レビューを待ちましょう！

            頑張りましたね！🫐✨`
            });

            console.log('PR created:', pullRequest.html_url);

      - name: Comment if already completed
        if: steps.update-quest.outputs.updated == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract-info.outputs.issue_number }},
              body: `⚠️ @${{ steps.extract-info.outputs.username }} さんは既にこのクエストを完了しています。

            完了者リストを確認してください： https://github.com/${{ github.repository }}/blob/main/_data/${{ steps.extract-info.outputs.quest_slug }}.md`
            });

  # PR承認時の処理
  quest-approved:
    # PRがApproveされた場合に実行
    if: |
      github.event.review.state == 'approved' &&
      contains(github.event.pull_request.labels.*.name, 'quest-completion')

    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Extract quest information from PR
        id: extract-info
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prBody = pr.body || '';
            const prTitle = pr.title || '';

            // PRタイトルからクエストスラッグとユーザー名を抽出
            // 例: "🎉 [Quest Complete] level-0/start - @username"
            const titleMatch = prTitle.match(/\[Quest Complete\]\s+(.+?)\s+-\s+@(.+)/);

            if (!titleMatch) {
              core.setFailed('PRタイトルからクエスト情報を抽出できませんでした');
              return;
            }

            const questSlug = titleMatch[1].trim();
            const username = titleMatch[2].trim();

            // PRボディから関連Issueを抽出
            const issueMatch = prBody.match(/Closes #(\d+)/);
            const issueNumber = issueMatch ? issueMatch[1] : null;

            console.log('Quest Slug:', questSlug);
            console.log('Username:', username);
            console.log('Issue Number:', issueNumber);
            console.log('PR Number:', pr.number);

            core.setOutput('quest_slug', questSlug);
            core.setOutput('username', username);
            core.setOutput('issue_number', issueNumber);
            core.setOutput('pr_number', pr.number);

      - name: Generate completion page URL
        id: generate-url
        run: |
          QUEST_SLUG="${{ steps.extract-info.outputs.quest_slug }}"
          USERNAME="${{ steps.extract-info.outputs.username }}"

          # BASE_URLを環境に応じて設定（本番環境のURLに変更してください）
          BASE_URL="https://blueberry-quest.vercel.app"

          # クエストスラッグをURLパス用に変換（スラッシュはそのまま）
          COMPLETION_URL="${BASE_URL}/quests/${QUEST_SLUG}/complete?username=${USERNAME}"

          echo "completion_url=${COMPLETION_URL}" >> $GITHUB_OUTPUT
          echo "Completion URL: ${COMPLETION_URL}"

      - name: Comment on PR with completion page
        uses: actions/github-script@v7
        with:
          script: |
            const completionUrl = '${{ steps.generate-url.outputs.completion_url }}';
            const username = '${{ steps.extract-info.outputs.username }}';
            const questSlug = '${{ steps.extract-info.outputs.quest_slug }}';

            const message = `# 🎉 クエスト完了おめでとうございます！

            @${username} さん、クエスト「${questSlug}」の完了が承認されました！

            ## ✨ 完了ページ

            あなた専用の完了ページが用意されています：

            🔗 **[完了ページを見る](${completionUrl})**

            完了ページでは以下のことができます：
            - 🎊 達成を祝う
            - 🐦 X (Twitter) でシェアする
            - 🏆 次のクエストを探す

            おめでとうございます！次の冒険も楽しみにしています！ 🫐✨`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: message
            });

            console.log('Posted completion page URL to PR');

      - name: Comment on related Issue
        if: steps.extract-info.outputs.issue_number != null
        uses: actions/github-script@v7
        with:
          script: |
            const completionUrl = '${{ steps.generate-url.outputs.completion_url }}';
            const username = '${{ steps.extract-info.outputs.username }}';
            const prNumber = '${{ steps.extract-info.outputs.pr_number }}';

            const message = `# 🎉 クエスト完了が承認されました！

            @${username} さん、おめでとうございます！

            あなたのクエスト完了申請（PR #${prNumber}）が承認されました。

            ## 🎊 完了ページはこちら

            🔗 **[完了ページを見る](${completionUrl})**

            完了ページで達成をシェアしましょう！🫐✨`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract-info.outputs.issue_number }},
              body: message
            });

            console.log('Posted completion page URL to Issue');

      - name: Merge Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // PRをマージ
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                merge_method: 'squash',
                commit_title: `🎉 quest: Complete ${context.payload.pull_request.title}`,
                commit_message: `Approved by @${context.payload.review.user.login}`
              });
              
              console.log('PR merged successfully');
            } catch (error) {
              console.error('Failed to merge PR:', error);
              // マージに失敗してもワークフロー自体は続行
            }
