name: Quest Completion

on:
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  create-completion-pr:
    # Issueのコメントで「完了しました」「完了」「done」などが含まれている場合に実行
    if: |
      github.event.issue.state == 'open' &&
      contains(github.event.issue.labels.*.name, 'quest-in-progress') &&
      (
        contains(github.event.comment.body, '完了しました') ||
        contains(github.event.comment.body, '完了') ||
        contains(github.event.comment.body, 'done') ||
        contains(github.event.comment.body, 'Done') ||
        contains(github.event.comment.body, 'DONE')
      )

    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract quest information from issue
        id: extract-info
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            const commenter = context.payload.comment.user.login;

            // Issueの本文からクエストスラッグを抽出
            const questSlugMatch = issueBody.match(/クエストスラッグ[:\s]*(.+)/);

            const questSlug = questSlugMatch ? questSlugMatch[1].trim().replace(/`/g, '') : '';
            const username = commenter; // コメント投稿者を常に使用

            if (!questSlug) {
              core.setFailed('クエストスラッグが見つかりませんでした');
              return;
            }

            console.log('Quest Slug:', questSlug);
            console.log('Username:', username);
            console.log('Issue Number:', issue.number);

            core.setOutput('quest_slug', questSlug);
            core.setOutput('username', username);
            core.setOutput('issue_number', issue.number);
            core.setOutput('branch_name', `quest/${questSlug.replace(/\//g, '-')}/${username}`);

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create branch
        run: |
          git checkout -b ${{ steps.extract-info.outputs.branch_name }}

      - name: Update user progress
        id: update-progress
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const questSlug = '${{ steps.extract-info.outputs.quest_slug }}';
            const username = '${{ steps.extract-info.outputs.username }}';
            const progressPath = path.join('_data', 'progress.json');

            console.log('Quest slug:', questSlug);
            console.log('Username:', username);

            // クエストスラッグからday番号を抽出 (例: "0/start" -> 0, "1/github-signup" -> 1)
            const dayMatch = questSlug.match(/^(\d+)\//);
            if (!dayMatch) {
              core.setFailed(`クエストスラッグからday番号を抽出できません: ${questSlug}`);
              return;
            }
            const completedDay = parseInt(dayMatch[1], 10);
            console.log('Completed day:', completedDay);

            // progress.jsonを読み込み
            let progressData;
            if (fs.existsSync(progressPath)) {
              const progressContent = fs.readFileSync(progressPath, 'utf8');
              progressData = JSON.parse(progressContent);
            } else {
              progressData = { users: [] };
            }

            // ユーザーを検索
            let userProgress = progressData.users.find(u => u.githubUsername === username);
            let isNewUser = false;
            let isUpdated = false;

            if (!userProgress) {
              // 新規ユーザー
              userProgress = {
                githubUsername: username,
                currentDay: completedDay + 1
              };
              progressData.users.push(userProgress);
              isNewUser = true;
              isUpdated = true;
              console.log(`New user ${username} added with day ${completedDay}`);
            } else {
              // 既存ユーザー：完了したdayが現在のcurrentDayより大きい場合のみ更新
              if (completedDay > userProgress.currentDay) {
                userProgress.currentDay = completedDay + 1;
                isUpdated = true;
                console.log(`Updated ${username} progress from ${userProgress.currentDay} to ${completedDay}`);
              } else if (completedDay === userProgress.currentDay) {
                console.log(`${username} has already completed day ${completedDay}`);
                isUpdated = false;
              } else {
                console.log(`${username} is already at day ${userProgress.currentDay}, completed day ${completedDay} is in the past`);
                isUpdated = false;
              }
            }

            if (isUpdated) {
              // progress.jsonを保存（整形して）
              fs.writeFileSync(progressPath, JSON.stringify(progressData, null, 2) + '\n');
              core.setOutput('updated', 'true');
              core.setOutput('progress_path', progressPath);
              core.setOutput('completed_day', completedDay.toString());
              core.setOutput('is_new_user', isNewUser.toString());
            } else {
              core.setOutput('updated', 'false');
            }

      - name: Commit changes
        if: steps.update-progress.outputs.updated == 'true'
        run: |
          git add ${{ steps.update-progress.outputs.progress_path }}
          git commit -m "⚔️ quest: Update progress for ${{ steps.extract-info.outputs.username }} (Day ${{ steps.update-progress.outputs.completed_day }})

          Quest: ${{ steps.extract-info.outputs.quest_slug }}
          Closes #${{ steps.extract-info.outputs.issue_number }}"

      - name: Push branch
        if: steps.update-progress.outputs.updated == 'true'
        run: |
          git push origin ${{ steps.extract-info.outputs.branch_name }}

      - name: Check if tutorial
        id: check-tutorial
        run: |
          QUEST_SLUG="${{ steps.extract-info.outputs.quest_slug }}"
          if [[ "$QUEST_SLUG" == 0/* ]]; then
            echo "is_tutorial=true" >> $GITHUB_OUTPUT
          else
            echo "is_tutorial=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.update-progress.outputs.updated == 'true'
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const isTutorial = '${{ steps.check-tutorial.outputs.is_tutorial }}' === 'true';

            // チュートリアル用の親切なPR本文
            const tutorialBody = `## 🌱 チュートリアル完了おめでとうございます！

            このPRは、**はじめてのクエスト**の完了申請です。

            ### ✨ クエスト情報
            - **クエスト**: \`${{ steps.extract-info.outputs.quest_slug }}\` (チュートリアル)
            - **完了者**: @${{ steps.extract-info.outputs.username }}
            - **関連Issue**: #${{ steps.extract-info.outputs.issue_number }}

            ---

            ### 🎊 次のステップ

            チュートリアルがチェックされます。承認されるまで、少々お待ちください...

            承認されると：
            1. ✅ あなたの進捗が記録されます
            2. 🎉 完了ページが用意されます
            3. 🚀 次のクエスト（Day 1）がアンロックされます！

            ---

            ### 💡 これから始まる冒険

            Blueberry Quest では、毎日1つのクエストに挑戦できます。
            Git/GitHub を使いながら、実践的なスキルを身につけていきましょう！

            わからないことがあれば、いつでも質問してください。
            一緒に頑張りましょう！🫐✨

            ---

            Closes #${{ steps.extract-info.outputs.issue_number }}`;

            // 通常クエスト用のPR本文
            const regularBody = `## 🎯 クエスト完了

            このPRは、クエスト完了の申請です。

            ### クエスト情報
            - **クエスト**: \`${{ steps.extract-info.outputs.quest_slug }}\`
            - **完了者**: @${{ steps.extract-info.outputs.username }}
            - **完了日**: Day ${{ steps.update-progress.outputs.completed_day }}
            - **関連Issue**: #${{ steps.extract-info.outputs.issue_number }}

            ---

            ### 📝 提出者へ

            以下の情報をこのPRのコメントに追加してください：

            1. **成果物・証拠**
              - 関連URL（記事、リポジトリ、デモサイトなど）
              - スクリーンショット
              - その他の成果物

            2. **振り返り**
              - 学んだこと
              - 苦労したこと
              - 次に挑戦したいこと

            ---

            ### ✅ レビュワーへ

            提出物を確認して、成功条件を満たしている場合はApproveしてください。
            問題がある場合は、コメントでフィードバックをお願いします。

            ---

            Closes #${{ steps.extract-info.outputs.issue_number }}`;

            // PRを作成
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🎉 クエスト完了: ${{ steps.extract-info.outputs.quest_slug }} - ${{ steps.extract-info.outputs.username }}`,
              head: '${{ steps.extract-info.outputs.branch_name }}',
              base: 'main',
              body: isTutorial ? tutorialBody : regularBody
            });

            // PRにラベルを追加
            const labels = ['quest-completion'];
            if (isTutorial) {
              labels.push('tutorial', 'auto-approve');
            } else {
              labels.push('needs-review');
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequest.number,
              labels: labels
            });

            // 元のIssueにコメント（チュートリアルと通常で内容を分ける）
            const issueComment = isTutorial 
              ? `🎉 チュートリアル完了申請のPRを作成しました！

            PR: #${pullRequest.number}

            **チュートリアルの完了申請が確認されます** ので、そのままお待ちください！
            承認されると、完了ページのリンクが表示されます。

            おめでとうございます！🫐✨`
              : `🎉 クエスト完了申請のPRを作成しました！

            PR: #${pullRequest.number}

            次のステップ：
            1. PRに成果物（URL、スクリーンショットなど）を投稿してください
            2. 振り返りを記入してください
            3. レビューを待ちましょう！

            頑張りましたね！🫐✨`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract-info.outputs.issue_number }},
              body: issueComment
            });

            // PR番号を出力（後続のステップで使用）
            core.setOutput('pr_number', pullRequest.number);
            console.log('PR created:', pullRequest.html_url);

      - name: Auto-approve tutorial PR
        if: steps.update-progress.outputs.updated == 'true' && steps.check-tutorial.outputs.is_tutorial == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.create-pr.outputs.pr_number }};

            // チュートリアルPRを自動承認
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              event: 'APPROVE',
              body: `🎉 チュートリアルの完了を自動承認しました！

            おめでとうございます！はじめてのクエストをクリアしましたね。

            これから毎日1つずつクエストに挑戦して、スキルアップしていきましょう！
            次のクエスト（Day 1）がアンロックされています。

            頑張ってください！🫐✨`
            });

            console.log('Tutorial PR auto-approved');

      - name: Auto-merge tutorial PR
        if: steps.update-progress.outputs.updated == 'true' && steps.check-tutorial.outputs.is_tutorial == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.create-pr.outputs.pr_number }};

            // 少し待ってからマージ（承認処理が完了するのを待つ）
            await new Promise(resolve => setTimeout(resolve, 2000));

            try {
              // PRをマージ
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',
                commit_title: `🎉 quest: Complete tutorial - @${{ steps.extract-info.outputs.username }}`,
                commit_message: `Automatically approved and merged tutorial completion`
              });
              
              console.log('Tutorial PR auto-merged');
              
              // 完了ページURLを生成
              const questSlug = '${{ steps.extract-info.outputs.quest_slug }}';
              const username = '${{ steps.extract-info.outputs.username }}';
              const baseUrl = 'https://blueberry-quest.vercel.app';
              const completionUrl = `${baseUrl}/quests/${questSlug}/complete?username=${username}`;
              
              // PRに完了メッセージをコメント
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `# 🎊 チュートリアル完了おめでとうございます！

            @${username} さん、はじめてのクエストをクリアしました！

            ## ✨ 完了ページ

            あなた専用の完了ページが用意されています：

            🔗 **[完了ページを見る](${completionUrl})**

            完了ページでは以下のことができます：
            - 🎊 達成を祝う
            - 🐦 X (Twitter) でシェアする
            - 🚀 次のクエストを探す

            ## 🎯 次の冒険

            おめでとうございます！これからが本番です。
            次のクエスト（Day 1）があなたを待っています。

            毎日コツコツと続けて、実践的なスキルを身につけていきましょう！🫐✨`
              });
              
              // 元のIssueにも完了メッセージ
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.extract-info.outputs.issue_number }},
                body: `# 🎉 チュートリアル完了が承認されました！

            @${username} さん、おめでとうございます！

            あなたのプルリクエストが、承認・マージされました。

            ## 🎊 完了ページはこちら

            🔗 **[完了ページを見る](${completionUrl})**

            完了ページで達成をシェアしましょう！
            次のクエストもお楽しみに！🫐✨`
              });
              
            } catch (error) {
              console.error('Failed to auto-merge tutorial PR:', error);
              // エラーが発生した場合もワークフローは続行
            }

      - name: Comment if already completed
        if: steps.update-progress.outputs.updated == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract-info.outputs.issue_number }},
              body: `⚠️ @${{ steps.extract-info.outputs.username }} さんは既にこのクエスト（またはそれ以降）を完了しています。

            進捗状況を確認してください： https://github.com/${{ github.repository }}/blob/main/_data/progress.json`
            });

  # PR承認時の処理
  quest-approved:
    # PRがApproveされた場合に実行
    if: |
      github.event.review.state == 'approved' &&
      contains(github.event.pull_request.labels.*.name, 'quest-completion')

    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Extract quest information from PR
        id: extract-info
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prBody = pr.body || '';
            const prTitle = pr.title || '';

            // PRタイトルからクエストスラッグとユーザー名を抽出
            // 例: "🎉 クエスト完了: level-0/start - username"
            const titleMatch = prTitle.match(/🎉\s+クエスト完了:\s+(.+?)\s+-\s+(.+)/);

            if (!titleMatch) {
              core.setFailed('PRタイトルからクエスト情報を抽出できませんでした');
              return;
            }

            const questSlug = titleMatch[1].trim();
            const username = titleMatch[2].trim();

            // PRボディから関連Issueを抽出
            const issueMatch = prBody.match(/Closes #(\d+)/);
            const issueNumber = issueMatch ? issueMatch[1] : null;

            console.log('Quest Slug:', questSlug);
            console.log('Username:', username);
            console.log('Issue Number:', issueNumber);
            console.log('PR Number:', pr.number);

            core.setOutput('quest_slug', questSlug);
            core.setOutput('username', username);
            core.setOutput('issue_number', issueNumber);
            core.setOutput('pr_number', pr.number);

      - name: Generate completion page URL
        id: generate-url
        run: |
          QUEST_SLUG="${{ steps.extract-info.outputs.quest_slug }}"
          USERNAME="${{ steps.extract-info.outputs.username }}"

          # BASE_URLを環境に応じて設定（本番環境のURLに変更してください）
          BASE_URL="https://blueberry-quest.vercel.app"

          # クエストスラッグをURLパス用に変換（スラッシュはそのまま）
          COMPLETION_URL="${BASE_URL}/quests/${QUEST_SLUG}/complete?username=${USERNAME}"

          echo "completion_url=${COMPLETION_URL}" >> $GITHUB_OUTPUT
          echo "Completion URL: ${COMPLETION_URL}"

      - name: Comment on PR with completion page
        uses: actions/github-script@v7
        with:
          script: |
            const completionUrl = '${{ steps.generate-url.outputs.completion_url }}';
            const username = '${{ steps.extract-info.outputs.username }}';
            const questSlug = '${{ steps.extract-info.outputs.quest_slug }}';

            const message = `# 🎉 クエスト完了おめでとうございます！

            @${username} さん、クエスト「${questSlug}」の完了が承認されました！

            ## ✨ 完了ページ

            あなた専用の完了ページが用意されています：

            🔗 **[完了ページを見る](${completionUrl})**

            完了ページでは以下のことができます：
            - 🎊 達成を祝う
            - 🐦 X (Twitter) でシェアする
            - 🏆 次のクエストを探す

            おめでとうございます！次の冒険も楽しみにしています！ 🫐✨`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: message
            });

            console.log('Posted completion page URL to PR');

      - name: Comment on related Issue
        if: steps.extract-info.outputs.issue_number != null
        uses: actions/github-script@v7
        with:
          script: |
            const completionUrl = '${{ steps.generate-url.outputs.completion_url }}';
            const username = '${{ steps.extract-info.outputs.username }}';
            const prNumber = '${{ steps.extract-info.outputs.pr_number }}';

            const message = `# 🎉 クエスト完了が承認されました！

            @${username} さん、おめでとうございます！

            あなたのクエスト完了申請（PR #${prNumber}）が承認されました。

            ## 🎊 完了ページはこちら

            🔗 **[完了ページを見る](${completionUrl})**

            完了ページで達成をシェアしましょう！🫐✨`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract-info.outputs.issue_number }},
              body: message
            });

            console.log('Posted completion page URL to Issue');

      - name: Merge Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // PRをマージ
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                merge_method: 'squash',
                commit_title: `🎉 quest: Complete ${context.payload.pull_request.title}`,
                commit_message: `Approved by @${context.payload.review.user.login}`
              });
              
              console.log('PR merged successfully');
            } catch (error) {
              console.error('Failed to merge PR:', error);
              // マージに失敗してもワークフロー自体は続行
            }
